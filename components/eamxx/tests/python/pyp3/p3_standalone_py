#!/usr/bin/env python3

import sys

# Add path to scream libs
sys.path.append('@SCREAM_BASE_DIR@/scripts')

# Add path to pyeamxx libs
sys.path.append('@CMAKE_BINARY_DIR@/src/share/python')
sys.path.append('@CMAKE_BINARY_DIR@/src/physics/p3/python')

from mpi4py import MPI
import pyscream as ps
import pyp3
from pathlib import Path
import numpy as np

from utils import ensure_yaml
ensure_yaml()
import yaml

from netCDF4 import Dataset

#  #########################################
#  def check_output (self):
#  #########################################

#      comm = MPI.COMM_WORLD

#      varnames = ['qi','qc','qr',
#                  'eff_radius_qc','eff_radius_qi','eff_radius_qr',
#                  'micro_liq_ice_exchange','micro_vap_liq_exchange','micro_vap_ice_exchange']

#      nc_cxx_filename = f"p3_standalone_cxx.INSTANT.nsteps_x1.np{comm.Get_size()}.@RUN_T0@.nc"
#      nc_py_filename = f"p3_standalone_py.INSTANT.nsteps_x1.np{comm.Get_size()}.@RUN_T0@.nc"
#      cxx_ds = Dataset(nc_cxx_filename,'r')
#      py_ds  = Dataset(nc_py_filename,'r')

#      nsnaps = cxx_ds.dimensions["time"].size
#      self.assertEqual(nsnaps,py_ds.dimensions['time'].size)
#      for n in range(0,nsnaps):
#          for vn in varnames:
#              # Get timeslice
#              cxx_var = cxx_ds.variables[vn][:].take(n,axis=0)
#              py_var  = py_ds.variables[vn][:].take(n,axis=0)

#              #  self.assertTrue(np.isclose(py_var.get(),cxx_var).all())
#              self.assertTrue(np.array_equal(py_var,cxx_var))

#########################################
def main ():
#########################################

    # Get timestepping params
    with open('input.yaml','r') as fd:
        yaml_input = yaml.load(fd,Loader=yaml.SafeLoader)
    nsteps = yaml_input['time_stepping']['number_of_steps']
    dt     = yaml_input['time_stepping']['time_step']
    t0_str = yaml_input['time_stepping']['run_t0']

    # Create the grid
    ncols = 218
    nlevs = 72
    grid = ps.Grid("Physics",ncols,nlevs)

    ic_file = Path('@SCREAM_DATA_DIR@/init/screami_unit_tests_ne2np4L72_20220822.nc')

    p3params = ps.ParameterList(yaml_input['atmosphere_processes']['p3'])
    print (f"type of max_total_ni is {type(yaml_input['atmosphere_processes']['p3']['max_total_ni'])}")
    p3 = pyp3.P3(grid,p3params)
    missing = p3.read_ic(str(ic_file))
    print (f"WARNING! The following input fields were not found in the IC file, and must be manually initialized: {missing}")
    p3.initialize(t0_str)
    p3.setup_output("output_py.yaml")
    
    # Time looop
    for n in range(0,nsteps):
        p3.run(dt)

####################################
if  __name__  == "__main__":
    # This level of indirection ensures all pybind structs are destroyed
    # before we finalize eamxx (and hence kokkos)
    ps.init()
    main ()
    ps.finalize()
