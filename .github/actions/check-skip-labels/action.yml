name: 'Check Skip Labels'
description: 'Check for specific skip labels in a pull request'
inputs:
  skip_labels:
    description: 'Comma-separated list of skip labels'
    required: true
  token:
    description: 'GitHub token for authentication'
    required: true
  pr_number:
    description: 'Pull request number'
    required: true

# Note: inputs are available as env vars in the shell run steps, convertet to uppercase

runs:
  using: "composite"
  steps:
    - name: Get Pull Request Labels
      run: |
        echo "Fetching pull request labels..."
        if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
          LABELS="$SKIP_LABELS"
        elif [[ "$GITHUB_EVENT_NAME" == "pull_request_review" ]]; then
          response=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER")
          # TODO: reinstante jq once the SNL image is rebuilt!
          # LABELS=$(echo "$response" | jq -r '.labels | map(.name) | join(",")')
          LABELS=$(echo "$response" | grep -o '"name": *"[^"]*"' | sed 's/"name": *//;s/"//g' | tr '\n' ',' | sed 's/,$//')
        fi
        echo "labels=$LABELS" >> $GITHUB_ENV
      shell: sh
    - name: Check for Skip Labels
      run: |
        echo "Checking for skip labels..."
        IFS=',' read -r -a SKIP_LABELS <<< "$SKIP_LABELS"
        IFS=',' read -r -a LABEL_ARRAY <<< "$labels"

        for label in "${SKIP_LABELS[@]}"; do
          for pr_label in "${LABEL_ARRAY[@]}"; do
            if [[ "$pr_label" == "$label" ]]; then
              echo "Found skip label '$label'. Skipping this job."
              exit 0  # Exit with success status
            fi
          done
        done
        echo "No relevant skip labels found. Continuing with the job."
      shell: sh
